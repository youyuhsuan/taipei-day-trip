name: Docker Image CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get Next Version
        id: version
        run: |
          LATEST_TAG=$(git tag --sort=-creatordate | head -n 1)
          if [ -z "$LATEST_TAG" ]; then
            NEXT_TAG="v1.0.0"
          else
            COMMIT_MSG=$(git log -1 --pretty=%B)
            CURRENT_VERSION=$(echo $LATEST_TAG | sed 's/v//')
            MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
            MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
            PATCH=$(echo $CURRENT_VERSION | cut -d. -f3)
            
            if echo "$COMMIT_MSG" | grep -q "BREAKING CHANGE\|feat.*!:\|fix.*!:\|refactor.*!:"; then
              NEXT_TAG="v$((MAJOR + 1)).0.0"
            elif echo "$COMMIT_MSG" | grep -q "feat[[:space:]]*(.*):"; then
              NEXT_TAG="v${MAJOR}.$((MINOR + 1)).0"
            else
              NEXT_TAG="v${MAJOR}.${MINOR}.$((PATCH + 1))"
            fi
          fi
          DATE=$(date +%Y%m%d)
          echo "VERSION=${NEXT_TAG}-${DATE}" >> $GITHUB_ENV

      - name: Build and Push Docker Image
        run: |
          IMAGE=stellayou/taipei-day-trip
          docker build -t $IMAGE:${{ env.VERSION }} .
          docker push $IMAGE:${{ env.VERSION }}

      - name: Pull Docker Image
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker pull stellayou/taipei-day-trip:${{ env.VERSION }}

      - name: Push code to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "requirements.txt,Dockerfile,docker-compose.yaml,docker-compose.prod.yaml,nginx/"
          target: "/home/ubuntu/taipei-day-trip"

      - name: Setup SSL directory
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ubuntu/taipei-day-trip
            mkdir -p .well-known/acme-challenge
            chmod -R 755 .well-known
            echo "=== SSL directory setup completed ==="

      - name: Create .env file
        uses: appleboy/ssh-action@master
        env:
          VERSION: ${{ env.VERSION }}
          MYSQL_DATABASE: ${{ vars.MYSQL_DATABASE }}
          MYSQL_HOST: ${{ vars.MYSQL_HOST }}
          MYSQL_PORT: ${{ vars.MYSQL_PORT }}
          MYSQL_USER: ${{ vars.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          ACCESS_TOKEN_EXPIRE_DAYS: ${{ vars.ACCESS_TOKEN_EXPIRE_DAYS }}
          ALGORITHM: ${{ vars.ALGORITHM }}
          MERCHANT_ID: ${{ vars.MERCHANT_ID }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          PARTNER_KEY: ${{ secrets.PARTNER_KEY }}
          TAPPAY_SANDBOX_URL: ${{ vars.TAPPAY_SANDBOX_URL }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ubuntu/taipei-day-trip
            echo "=== Debug: Creating .env file with VERSION=${{env.VERSION}} ==="
            cat > .env << EOL
            VERSION=${{env.VERSION}}
            MYSQL_DATABASE=${{vars.MYSQL_DATABASE}}
            MYSQL_HOST=${{vars.MYSQL_HOST}}
            MYSQL_PORT=${{vars.MYSQL_PORT}}
            MYSQL_USER=${{vars.MYSQL_USER}}
            MYSQL_PASSWORD=${{secrets.MYSQL_PASSWORD}}
            MYSQL_ROOT_PASSWORD=${{secrets.MYSQL_ROOT_PASSWORD}}
            ACCESS_TOKEN_EXPIRE_DAYS=${{vars.ACCESS_TOKEN_EXPIRE_DAYS}}
            ALGORITHM=${{vars.ALGORITHM}}
            MERCHANT_ID=${{vars.MERCHANT_ID}}
            SECRET_KEY=${{secrets.SECRET_KEY}}
            PARTNER_KEY=${{secrets.PARTNER_KEY}}
            TAPPAY_SANDBOX_URL=${{vars.TAPPAY_SANDBOX_URL}}
            EOL
            echo "=== Debug: .env file created. Showing non-sensitive variables: ==="
            grep -v "PASSWORD\|KEY" .env

      - name: Deploy New Container
        uses: appleboy/ssh-action@master
        env:
          VERSION: ${{ env.VERSION }}
          MYSQL_DATABASE: ${{ vars.MYSQL_DATABASE }}
          MYSQL_HOST: ${{ vars.MYSQL_HOST }}
          MYSQL_PORT: ${{ vars.MYSQL_PORT }}
          MYSQL_USER: ${{ vars.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          ACCESS_TOKEN_EXPIRE_DAYS: ${{ vars.ACCESS_TOKEN_EXPIRE_DAYS }}
          ALGORITHM: ${{ vars.ALGORITHM }}
          MERCHANT_ID: ${{ vars.MERCHANT_ID }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          PARTNER_KEY: ${{ secrets.PARTNER_KEY }}
          TAPPAY_SANDBOX_URL: ${{ vars.TAPPAY_SANDBOX_URL }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ubuntu/taipei-day-trip
            docker compose down
            docker compose -f docker-compose.yaml -f docker-compose.prod.yaml up -d

      - name: Check Container Status
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ubuntu/taipei-day-trip
            echo "=== Container Status ==="
            docker inspect ubuntu-app-1 --format='{{.State.Status}}'
            docker inspect ubuntu-mydb-1 --format='{{.State.Status}}'
            docker inspect ubuntu-nginx-1 --format='{{.State.Status}}' 
            echo "=== Container Logs ==="
            docker logs ubuntu-app-1
            docker logs ubuntu-mydb-1
            docker logs ubuntu-nginx-1
            echo "=== Nginx Configuration Check ==="
            docker exec ubuntu-nginx-1 nginx -t
            echo "=== SSL Certificate Status ==="
            [ -f /etc/letsencrypt/ssl/fullchain.pem ] && echo "SSL certificate exists" || echo "SSL certificate missing"
